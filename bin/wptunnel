#!/usr/bin/env bash
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RED='\033[1;31m'
NOCOLOR='\033[0m'

set -o errexit -o pipefail -o noclobber

! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo "Iâ€™m sorry, `getopt --test` failed in this environment."
    exit 1
fi

OPTIONS=hv
LONGOPTS=help,version

! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    exit 2
fi
eval set -- "$PARSED"

helptext="
Usage:  wptunnel [OPTIONS] <COMMAND> <SUBDOMAIN>

Creates and runs a local WordPress installation within Docker container and makes it available at <subdomain>.wptunnel.com

Example:

    $ wptunnel create mysite
    $ wptunnel run mysite

Options:
    -h | --help         Show this help text
    -v | --version      Show script version

Commands:
    create              Create or overwrite a local WordPress installation
    run                 Run and expose (proxy) a local WordPress installation to <subdomain>.wptunnel.com
    stop                Stop a running WordPress installation
    list                List local WordPress installations

Subdomain
    <subdomain>.wptunnel.com
"

if [[ $PARSED == " --" ]]; then
    echo "$helptext"
    exit 0
fi

while true; do
    case "$1" in
        -h|--help)
            echo "$helptext"
            exit 0
            ;;
        -v|--version)
            echo $(cat ${BASH_SOURCE%/*}/../version)
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 0
            ;;
    esac
done

assert_subdomain () {
    r1=$(printf '%s' {a..z} {0..9})
    r2="[$r1]"
    r3="[$r1-]"
    reg="^$r2($r3{0,30}$r2)?$"
    if [ -z "$1" ]; then
        echo "Missing subdomain."
        echo "Run 'wptunnel --help' for more information."
        exit 1
    fi
    if [[ ! "$1" =~ $reg ]]; then
        echo "Subdomain can only contain [a-z], [0-9] or '-' and must be less than 30 letters."
        echo "Run 'wptunnel --help' for more information."
        exit 1
    fi
}

assert_project () {
    if [ ! -d "$HOME/.wptunnel/projects/$1" ]; then
        echo "Project with the given subdomain doesn't exist."
        echo -e "You can create it with:\n"
        echo -e " $ wptunnel create $1\n"
        echo "Run 'wptunnel --help' for more information."
        exit 1
    fi
}

is_running () {
    sh -c "docker-compose -f ~/.wptunnel/projects/${1}/docker-compose.yml top | grep wptunnel_wordpress_${2} > /dev/null"
}

api_project_exists () {
    response_code=$(curl --write-out %{http_code} --silent --head --output /dev/null https://api.wptunnel.com/projects/${2})
    if [ response_code == "200" ]; then
        exit 0
    else
        exit 1
    fi
}

case "$1" in
  create)
    SUBDOMAIN="$2"
    assert_subdomain ${SUBDOMAIN}
    PROJECT_DIR="${HOME}/.wptunnel/projects/${SUBDOMAIN}"
    PROJECT_DATA_DIR="${HOME}/wptunnel/projects/${SUBDOMAIN}"
    mkdir -p ${PROJECT_DIR}
    mkdir -p ${PROJECT_DATA_DIR}
    cp -r ${HOME}/.wptunnel/docker/frp-docker ${PROJECT_DIR}

    PROJECT_DOCKER_COMPOSE="${PROJECT_DIR}/docker-compose.yml"
    cp ~/.wptunnel/template/docker-compose.yml ${PROJECT_DOCKER_COMPOSE}
    sed -i "s/{SUBDOMAIN}/${SUBDOMAIN}/g" ${PROJECT_DOCKER_COMPOSE}
    sed -i "s|{DATA_DIR}|${PROJECT_DATA_DIR}|g" ${PROJECT_DOCKER_COMPOSE}

    PROJECT_FRPC_INI="${PROJECT_DIR}/frp-docker/frpc.ini"
    sed -i "s/{SUBDOMAIN}/${SUBDOMAIN}/g" ${PROJECT_FRPC_INI}
    ;;
  run)
    assert_subdomain "$2"
    assert_project "$2"

    PROJECT_DIR="${HOME}/.wptunnel/projects/$2"
    PROJECT_LOG_DIR="${PROJECT_DIR}/log"
    PROJECT_LOG_FILE="${PROJECT_LOG_DIR}/docker-container.log"
    mkdir -p ${PROJECT_LOG_DIR}
    sh -c "docker-compose -f ~/.wptunnel/projects/${2}/docker-compose.yml up -d"
    sh -c "docker-compose -f ~/.wptunnel/projects/${2}/docker-compose.yml logs -f > ${PROJECT_LOG_FILE} 2>&1 &"
    LOGGER_PID=$!
    echo -n "Waiting setup script to finish... "
    while ! $(grep -P "wptunnel_setup.+exited with code 0" ${PROJECT_LOG_FILE} > /dev/null); do
        sleep 0.5
    done
    echo -e "${GREEN}OK${NOCOLOR}"
    kill -9 LOGGER_PID > /dev/null 2>&1
    ;;
  stop)
    assert_subdomain "$2"
    assert_project "$2"
    PROJECT_DIR="${HOME}/.wptunnel/projects/$2"
    PROJECT_LOG_DIR="${PROJECT_DIR}/log"
    PROJECT_LOG_FILE="${PROJECT_LOG_DIR}/docker-container.log"
    mkdir -p ${PROJECT_LOG_DIR}

    echo -n "Stopping (it can take up to 30 seconds)...  "
    sh -c "docker-compose -f ~/.wptunnel/projects/${2}/docker-compose.yml down > ${PROJECT_LOG_FILE} 2>&1"

    if [ $? -ne 0 ]; then
        echo -e "${RED}ERROR${NOCOLOR}"
        echo "See more at ${PROJECT_LOG_FILE}"
    else
        echo -e "${GREEN}STOPPED${NOCOLOR}"
    fi
    ;;
  eject)
    echo "Not yet implemented."
    ;;
  *)
    echo "Unknown command: $1"
    echo "$helptext"
    ;;
esac
