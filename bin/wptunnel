#!/usr/bin/env bash
set -o errexit -o pipefail -o noclobber

! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo "Iâ€™m sorry, `getopt --test` failed in this environment."
    exit 1
fi

OPTIONS=hv
LONGOPTS=help,version

! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    exit 2
fi
eval set -- "$PARSED"

helptext="
Usage:  wptunnel [OPTIONS] <COMMAND> <SUBDOMAIN>

Creates and runs a local WordPress installation within Docker container and makes it available at <subdomain>.wptunnel.com

Example:

    $ wptunnel create mysite
    $ wptunnel run mysite

Options:
    -h | --help         Show this help text
    -v | --version      Show script version

Commands:
    create              Create or overwrite a local WordPress installation
    run                 Run and expose (proxy) a local WordPress installation to <subdomain>.wptunnel.com
    eject               Not jet implemented

Subdomain
    <subdomain>.wptunnel.com
"

if [[ $PARSED == " --" ]]; then
    echo "$helptext"
    exit 0
fi

while true; do
    case "$1" in
        -h|--help)
            echo "$helptext"
            exit 0
            ;;
        -v|--version)
            echo $(cat ../version)
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 0
            ;;
    esac
done

assert_subdomain () {
    r1=$(printf '%s' {a..z} {0..9})
    r2="[$r1]"
    r3="[$r1-]"
    reg="^$r2($r3{0,30}$r2)?$"
    if [ -z "$1" ]; then
        echo "Missing subdomain."
        echo "Run 'wptunnel --help' for more information."
        exit 1
    fi
    if [[ ! "$1" =~ $reg ]]; then
        echo "Subdomain can only contain [a-z], [0-9] or '-' and must be less than 30 letters."
        echo "Run 'wptunnel --help' for more information."
        exit 1
    fi
}

assert_project () {
    if [ ! -d "$HOME/.wptunnel/projects/$1" ]; then
        echo "Project with the given subdomain doesn't exist."
        echo -e "You can create it with:\n"
        echo -e " $ wptunnel create $1\n"
        echo "Run 'wptunnel --help' for more information."
        exit 1
    fi
}

case "$1" in
  create)
    assert_subdomain "$2"
    SUBDOMAIN="$2"
    PROJECT_DIR="$HOME/.wptunnel/projects/$2"
    PROJECT_DATA_DIR="$HOME/wptunnel/projects/$2"
    sh -c "mkdir -p $PROJECT_DIR"
    sh -c "mkdir -p $PROJECT_DATA_DIR"
    sh -c "cp -R $HOME/.wptunnel/docker/frp-docker $PROJECT_DIR"

    PROJECT_DOCKER_COMPOSE="$PROJECT_DIR/docker-compose.yml"
    sh -c "cp ~/.wptunnel/template/docker-compose.yml $PROJECT_DOCKER_COMPOSE"
    sh -c "sed -i \"s/{SUBDOMAIN}/${SUBDOMAIN}/g\" $PROJECT_DOCKER_COMPOSE"
    sh -c "sed -i \"s/{DATA_DIR}/${PROJECT_DATA_DIR}/g\" $PROJECT_DOCKER_COMPOSE"

    PROJECT_FRPC_INI="$PROJECT_DIR/frp-docker/frpc.ini"
    sh -c "sed -i \"s/{SUBDOMAIN}/${SUBDOMAIN}/g\" $PROJECT_FRPC_INI"
    ;;
  run)
    assert_subdomain "$2"
    assert_project "$2"
    sh -c "docker-compose -f ~/.wptunnel/projects/$2/docker-compose.yml up"
    ;;
  eject)
    echo "Not yet implemented."
    ;;
  *)
    echo "Unknown command: $1"
    echo "$helptext"
    ;;
esac
